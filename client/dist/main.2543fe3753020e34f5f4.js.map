{"version":3,"sources":["webpack://trip-planner-client/./src/index.js"],"names":["fetch","then","response","json","data","console","log"],"mappings":"mBAIAA,MAAM,yBAAyBC,MAAK,SAAAC,GAChC,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,O","file":"main.2543fe3753020e34f5f4.js","sourcesContent":["import './normalize.css';\r\nimport './index.css';\r\n//import { getTrips, deleteTrips, deleteExpense } from './api/tripsApi';\r\n\r\nfetch('http://localhost:5000').then(response =>{\r\n    return response.json();\r\n}).then(data =>{\r\n    console.log(data);\r\n})\r\n\r\n// Populate list of trips via API call.\r\n/*\r\ngetTrips().then(result => {\r\n    let tripBody = \"\";\r\n\r\n    result.forEach(trip => {\r\n        let expensesList = \"\";\r\n        for (let i in trip.expenses) {\r\n            expensesList+= `<li class=\"expense flex\" id=\"expense-item\">\r\n                <p>${trip.expenses[i].name}</p> \r\n                <p>$${trip.expenses[i].price}</p>\r\n                <button data-id=\"${trip.expenses[i].id}\" class=\"deleteExpense\">x</button>\r\n            </li>`\r\n        }\r\n        tripBody+= `<section id=\"trip-section-${trip.id}\" class=\"trip column center flex\">       \r\n            <h2>${trip.name}</h2>\r\n            <ul class=\"expense-list column center flex\" id=\"expense-list-${trip.id}\">\r\n                ${expensesList}\r\n            </ul>\r\n            <button class=\"add-expense\" id=\"expense-button-${trip.id}\">Add Expense</button>\r\n            <button data-id=\"${trip.id}\" class=\"deleteTrips\">x</button>\r\n            <div class=\"trip-total center flex\">\r\n                <p>Trip Total</p>\r\n                <p class=\"total\" id=\"trip-total-${trip.id}\">$${trip.total}</p>\r\n            </div>\r\n        </section>`\r\n    });\r\n\r\n    global.document.getElementById(\"trips\").innerHTML = tripBody;\r\n      \r\n    const deleteLinks = global.document.getElementsByClassName(\"deleteTrips\");\r\n\r\n    // Must use array.from to create a real array from a DOM collection\r\n    // getElementsByClassname only returns and \"array like\" object\r\n    Array.from(deleteLinks, link => {\r\n        link.onclick = function(event) {\r\n            const element = event.target;\r\n            event.preventDefault();\r\n            deleteTrips(element.attributes[\"data-id\"].value);\r\n            const trip = element.parentNode;\r\n            trip.parentNode.removeChild(trip);\r\n        };\r\n    });\r\n\r\n    const deleteLinks2 = global.document.getElementsByClassName(\"deleteExpense\");\r\n\r\n    Array.from(deleteLinks2, link => {\r\n        link.onclick = function(event) {\r\n            const element = event.target;\r\n            event.preventDefault();\r\n            deleteExpense(element.attributes[\"data-id\"].value);\r\n            const trip = element.parentNode;\r\n            trip.parentNode.removeChild(trip);\r\n        };\r\n    });\r\n});\r\n*/\r\n\r\n\r\n// TODO: \r\n// Calculate totals from JSON\r\n// Add expense delete\r\n// Fix trip add\r\n// Fix expense add\r\n\r\n\r\n/*\r\n// Selectors\r\nconst tripList = document.querySelector('.trip-list');\r\nconst newTripButton = document.querySelector('.new-trip');\r\nconst hambugerMenuButton = document.querySelector('.hamburger');\r\nconst navItems = document.querySelectorAll('.item');\r\n\r\n// Counter for id generation\r\nlet counter = 0;\r\n\r\n// Blueprint to create new trip object\r\nclass Trip {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.expenses = [];\r\n        this.total = 0;\r\n        this.id = counter;\r\n    }\r\n\r\n    // Add new expense object to expenses array\r\n    addExpense(name, price) {\r\n        this.expenses.push( new Expense(name, price) );\r\n    }\r\n\r\n    // Calculate total of trip expenses\r\n    sumTotal() {\r\n        this.total = 0;\r\n        for ( let i = 0; i < this.expenses.length; i++) {\r\n            this.total += this.expenses[i].price;\r\n        } return this.total;\r\n    }\r\n}\r\n\r\n// Blueprint to create new expense object\r\nclass Expense {\r\n    constructor(name, price) {\r\n        this.name = name;\r\n        this.price = price;\r\n    }\r\n}\r\n\r\n// Generate trip section element and contents\r\nfunction getTripSectionElement (trip) {\r\n    const section = document.createElement('section');\r\n    section.id = `trip-section-${trip.id}`;\r\n    section.className = \"trip column center flex\";\r\n    const tripHTMLContent = `        \r\n        <h2>${trip.name}</h2>\r\n        <ul class=\"expense-list column center flex\" id=\"expense-list-${trip.id}\">\r\n        </ul>\r\n        <button class=\"add-expense\" id=\"expense-button-${trip.id}\">Add Expense</button>\r\n        <div class=\"trip-total center flex\">\r\n            <p>Trip Total</p>\r\n            <p class=\"total\" id=\"trip-total-${trip.id}\">$${trip.total}</p>\r\n        </div>\r\n    `;\r\n    section.innerHTML = tripHTMLContent;\r\n    return section\r\n}\r\n\r\n// Button to create new trip object and populate it with content\r\nnewTripButton.addEventListener('click', () => {\r\n    let tripName = prompt(\"Please name your trip\");\r\n    if (tripName) {\r\n        const newTrip = new Trip(tripName)\r\n        const sectionElement = getTripSectionElement(newTrip);\r\n        tripList.appendChild(sectionElement);\r\n        const newTripExpenseButton = document.querySelector(`#expense-button-${newTrip.id}`);\r\n        newTripExpenseButton.addEventListener('click', () => {\r\n            const newTripExpenseList = document.querySelector(`#expense-list-${newTrip.id}`);\r\n            let expenseName = prompt(\"Please name your expense\");\r\n            if (expenseName) {\r\n                let expensePrice = parseFloat( prompt(\"Please enter the expense amount\") );\r\n                if ( isNaN(expensePrice) ) {\r\n                    alert(\"Please enter a numeric value.\")\r\n                } else {\r\n                    newTrip.addExpense(expenseName, expensePrice);\r\n                    const newExpenseItemElement = getExpenseListItemElement(newTrip);\r\n                    newTripExpenseList.appendChild(newExpenseItemElement);\r\n                    const newTripTotalElement = document.querySelector(`#trip-total-${newTrip.id}`);\r\n                    newTripTotalElement.textContent = newTrip.sumTotal().toLocaleString(\"en-US\", {style:\"currency\", currency:\"USD\"});\r\n                }\r\n            } else {\r\n                alert(\"Please enter an expense name.\")\r\n            }\r\n        });\r\n        counter++;\r\n    } else {\r\n        alert(\"Please enter a trip name.\")\r\n    }\r\n});\r\n\r\n// Generate expense li elements and contents \r\nfunction getExpenseListItemElement(trip) {\r\n    const li = document.createElement(\"li\");\r\n    li.className = \"expense flex\";\r\n    li.id = `expense-item-${trip.id}`;\r\n    for (let i = 0; i < trip.expenses.length; i++ ) {\r\n        li.innerHTML = `                \r\n            <p>${trip.expenses[i].name}</p> \r\n            <p>${trip.expenses[i].price.toLocaleString(\"en-US\", {style:\"currency\", currency:\"USD\"})}</p>\r\n        `;\r\n    }\r\n    return li;\r\n}\r\n\r\n// Hamburger Menu\r\nhambugerMenuButton.addEventListener('click', () => { \r\n    for ( let i = 0; i < navItems.length; i++ ) {\r\n        if ( navItems[i].classList.contains(\"hidden\") ) {\r\n            navItems[i].classList.remove(\"hidden\");\r\n        } else {\r\n            navItems[i].classList.add(\"hidden\");\r\n        }\r\n    }\r\n});\r\n*/"],"sourceRoot":""}